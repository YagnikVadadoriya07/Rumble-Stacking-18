{"remainingRequest":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/babel-loader/lib/index.js!/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/ts-loader/index.js??ref--14-2!/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/src/components/gem-farm/BankWhitelist.vue?vue&type=script&lang=ts","dependencies":[{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/src/components/gem-farm/BankWhitelist.vue","mtime":1661228910000},{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/babel.config.js","mtime":1661228910000},{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/cache-loader/dist/cjs.js","mtime":1663235615568},{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/babel-loader/lib/index.js","mtime":1663235615501},{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/ts-loader/index.js","mtime":1663235630214},{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/cache-loader/dist/cjs.js","mtime":1663235615568},{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/vue-loader-v16/dist/index.js","mtime":1663235636100}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL3lhZ25pay12YWRhZG9yaXlhL0Rlc2t0b3AvR2VtLUZhcm0tMTctMjAyMi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvci5qcyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBvbk1vdW50ZWQsIHJlZiwgd2F0Y2ggfSBmcm9tICd2dWUnOwppbXBvcnQgeyBXaGl0ZWxpc3RUeXBlIH0gZnJvbSAnQGdlbXdvcmtzL2dlbS1mYXJtLXRzJzsKaW1wb3J0IHVzZUNsdXN0ZXIgZnJvbSAnQC9jb21wb3NhYmxlcy9jbHVzdGVyJzsKaW1wb3J0IHVzZVdhbGxldCBmcm9tICdAL2NvbXBvc2FibGVzL3dhbGxldCc7CmltcG9ydCB7IFB1YmxpY0tleSB9IGZyb20gJ0Bzb2xhbmEvd2ViMy5qcyc7CmltcG9ydCB7IGluaXRHZW1GYXJtIH0gZnJvbSAnQC9jb21tb24vZ2VtLWZhcm0nOwpleHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoewogIHByb3BzOiB7CiAgICBmYXJtOiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgcmVxdWlyZWQ6IHRydWUKICAgIH0sCiAgICBiYW5rOiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgcmVxdWlyZWQ6IHRydWUKICAgIH0KICB9LAogIHNldHVwOiBmdW5jdGlvbiBzZXR1cChwcm9wcywgY3R4KSB7CiAgICB2YXIgX3VzZVdhbGxldCA9IHVzZVdhbGxldCgpLAogICAgICAgIHdhbGxldCA9IF91c2VXYWxsZXQud2FsbGV0LAogICAgICAgIGdldFdhbGxldCA9IF91c2VXYWxsZXQuZ2V0V2FsbGV0OwoKICAgIHZhciBfdXNlQ2x1c3RlciA9IHVzZUNsdXN0ZXIoKSwKICAgICAgICBjbHVzdGVyID0gX3VzZUNsdXN0ZXIuY2x1c3RlciwKICAgICAgICBnZXRDb25uZWN0aW9uID0gX3VzZUNsdXN0ZXIuZ2V0Q29ubmVjdGlvbjsKCiAgICB2YXIgZ2Y7CiAgICB3YXRjaChbd2FsbGV0LCBjbHVzdGVyXSwgLyojX19QVVJFX18qL19hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICAgIHJldHVybiBpbml0R2VtRmFybShnZXRDb25uZWN0aW9uKCksIGdldFdhbGxldCgpKTsKCiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICBnZiA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUpOwogICAgfSkpKTsgLy9uZWVkIGFuIG9ubW91bnRlZCBob29rIGJlY2F1c2UgdGhpcyBjb21wb25lbnQgaXNuJ3QgeWV0IG1vdW50ZWQgd2hlbiB3YWxsZXQvY2x1c3RlciBhcmUgc2V0CgogICAgb25Nb3VudGVkKCAvKiNfX1BVUkVfXyovX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBpZiAoIShnZXRXYWxsZXQoKSAmJiBnZXRDb25uZWN0aW9uKCkpKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzsKICAgICAgICAgICAgICByZXR1cm4gaW5pdEdlbUZhcm0oZ2V0Q29ubmVjdGlvbigpLCBnZXRXYWxsZXQoKSk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgZ2YgPSBfY29udGV4dDIuc2VudDsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDY7CiAgICAgICAgICAgICAgcmV0dXJuIGZldGNoUHJvb2ZzKCk7CgogICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMik7CiAgICB9KSkpOyAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gd2hpdGVsaXN0CgogICAgdmFyIGFjdGlvbiA9IHJlZignYWRkJyk7CiAgICB2YXIgYWRkcmVzcyA9IHJlZigpOwogICAgdmFyIHR5cGUgPSByZWYoV2hpdGVsaXN0VHlwZS5DcmVhdG9yKTsKICAgIHZhciBwcm9vZnMgPSByZWYoW10pOwoKICAgIHZhciBmZXRjaFByb29mcyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfcmVmMyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoKSB7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiBnZi5mZXRjaEFsbFdoaXRlbGlzdFByb29mUERBcyhuZXcgUHVibGljS2V5KHByb3BzLmJhbmspKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgcHJvb2ZzLnZhbHVlID0gX2NvbnRleHQzLnNlbnQ7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMyk7CiAgICAgIH0pKTsKCiAgICAgIHJldHVybiBmdW5jdGlvbiBmZXRjaFByb29mcygpIHsKICAgICAgICByZXR1cm4gX3JlZjMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfTsKICAgIH0oKTsKCiAgICB2YXIgdXBkYXRlV2hpdGVsaXN0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgdmFyIF9yZWY0ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNCgpIHsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgaWYgKCEoYWN0aW9uLnZhbHVlID09PSAnYWRkJykpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSA3OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gZ2YuYWRkVG9CYW5rV2hpdGVsaXN0V2FsbGV0KG5ldyBQdWJsaWNLZXkocHJvcHMuZmFybSksIG5ldyBQdWJsaWNLZXkoYWRkcmVzcy52YWx1ZSksIHR5cGUudmFsdWUpOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gZmV0Y2hQcm9vZnMoKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAxMTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDk7CiAgICAgICAgICAgICAgICByZXR1cm4gZ2YucmVtb3ZlRnJvbUJhbmtXaGl0ZWxpc3RXYWxsZXQobmV3IFB1YmxpY0tleShwcm9wcy5mYXJtKSwgbmV3IFB1YmxpY0tleShhZGRyZXNzLnZhbHVlKSk7CgogICAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICByZXR1cm4gZmV0Y2hQcm9vZnMoKTsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNCk7CiAgICAgIH0pKTsKCiAgICAgIHJldHVybiBmdW5jdGlvbiB1cGRhdGVXaGl0ZWxpc3QoKSB7CiAgICAgICAgcmV0dXJuIF9yZWY0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH07CiAgICB9KCk7CgogICAgdmFyIHBhcnNlV2hpdGVsaXN0VHlwZSA9IGZ1bmN0aW9uIHBhcnNlV2hpdGVsaXN0VHlwZShudW1UeXBlKSB7CiAgICAgIHN3aXRjaCAobnVtVHlwZSkgewogICAgICAgIGNhc2UgMToKICAgICAgICAgIHJldHVybiAnQ3JlYXRvcic7CgogICAgICAgIGNhc2UgMjoKICAgICAgICAgIHJldHVybiAnTWludCc7CgogICAgICAgIGNhc2UgMzoKICAgICAgICAgIHJldHVybiAnTWludCArIFdoaXRlbGlzdCc7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICByZXR1cm4gJ3Vua25vd24nOwogICAgICB9CiAgICB9OwoKICAgIHJldHVybiB7CiAgICAgIFdoaXRlbGlzdFR5cGU6IFdoaXRlbGlzdFR5cGUsCiAgICAgIGFjdGlvbjogYWN0aW9uLAogICAgICBhZGRyZXNzOiBhZGRyZXNzLAogICAgICB0eXBlOiB0eXBlLAogICAgICBwcm9vZnM6IHByb29mcywKICAgICAgdXBkYXRlV2hpdGVsaXN0OiB1cGRhdGVXaGl0ZWxpc3QsCiAgICAgIHBhcnNlV2hpdGVsaXN0VHlwZTogcGFyc2VXaGl0ZWxpc3RUeXBlCiAgICB9OwogIH0KfSk7"},{"version":3,"sources":["/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/src/components/gem-farm/BankWhitelist.vue?vue&type=script&lang=ts"],"names":[],"mappings":"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","sourcesContent":["\nimport { defineComponent, onMounted, ref, watch } from 'vue';\nimport { WhitelistType } from '@gemworks/gem-farm-ts';\nimport useCluster from '@/composables/cluster';\nimport useWallet from '@/composables/wallet';\nimport { PublicKey } from '@solana/web3.js';\nimport { initGemFarm } from '@/common/gem-farm';\n\nexport default defineComponent({\n  props: {\n    farm: { type: String, required: true },\n    bank: { type: String, required: true },\n  },\n  setup(props, ctx) {\n    const { wallet, getWallet } = useWallet();\n    const { cluster, getConnection } = useCluster();\n\n    let gf: any;\n    watch([wallet, cluster], async () => {\n      gf = await initGemFarm(getConnection(), getWallet()!);\n    });\n\n    //need an onmounted hook because this component isn't yet mounted when wallet/cluster are set\n    onMounted(async () => {\n      if (getWallet() && getConnection()) {\n        gf = await initGemFarm(getConnection(), getWallet()!);\n      }\n      await fetchProofs();\n    });\n\n    // --------------------------------------- whitelist\n    const action = ref<string>('add');\n    const address = ref<string>();\n    const type = ref<WhitelistType>(WhitelistType.Creator);\n    const proofs = ref<PublicKey[]>([]);\n\n    const fetchProofs = async () => {\n      proofs.value = await gf.fetchAllWhitelistProofPDAs(\n        new PublicKey(props.bank)\n      );\n    };\n\n    const updateWhitelist = async () => {\n      if (action.value === 'add') {\n        await gf.addToBankWhitelistWallet(\n          new PublicKey(props.farm),\n          new PublicKey(address.value!),\n          type.value\n        );\n        await fetchProofs();\n      } else {\n        await gf.removeFromBankWhitelistWallet(\n          new PublicKey(props.farm),\n          new PublicKey(address.value!)\n        );\n        await fetchProofs();\n      }\n    };\n\n    const parseWhitelistType = (numType: number) => {\n      switch (numType) {\n        case 1:\n          return 'Creator';\n        case 2:\n          return 'Mint';\n        case 3:\n          return 'Mint + Whitelist';\n        default:\n          return 'unknown';\n      }\n    };\n\n    return {\n      WhitelistType,\n      action,\n      address,\n      type,\n      proofs,\n      updateWhitelist,\n      parseWhitelistType,\n    };\n  },\n});\n"],"sourceRoot":""}]}