{"remainingRequest":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/babel-loader/lib/index.js!/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/ts-loader/index.js??ref--14-2!/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/src/components/gem-bank/Vault.vue?vue&type=script&lang=ts","dependencies":[{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/src/components/gem-bank/Vault.vue","mtime":1661598132000},{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/babel.config.js","mtime":1661228910000},{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/cache-loader/dist/cjs.js","mtime":1663235615568},{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/babel-loader/lib/index.js","mtime":1663235615501},{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/ts-loader/index.js","mtime":1663235630214},{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/cache-loader/dist/cjs.js","mtime":1663235615568},{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/vue-loader-v16/dist/index.js","mtime":1663235636100}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/src/components/gem-bank/Vault.vue?vue&type=script&lang=ts"],"names":[],"mappings":"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","sourcesContent":["\nimport { defineComponent, onMounted, ref, watch } from 'vue';\nimport NFTGrid from '@/components/gem-bank/NFTGrid.vue';\nimport ArrowButton from '@/components/ArrowButton.vue';\nimport useWallet from '@/composables/wallet';\nimport useCluster from '@/composables/cluster';\nimport {\n  getNFTMetadataForMany,\n  getNFTsByOwner,\n  INFT,\n} from '@/common/web3/NFTget';\nimport { initGemBank } from '@/common/gem-bank';\nimport { PublicKey } from '@solana/web3.js';\nimport { getListDiffBasedOnMints, removeManyFromList } from '@/common/util';\nimport { BN } from '@project-serum/anchor';\n\nexport default defineComponent({\n  components: { ArrowButton, NFTGrid },\n  props: {\n    vault: String,\n  },\n  emits: ['selected-wallet-nft'],\n  setup(props, ctx) {\n    const { wallet, getWallet } = useWallet();\n    const { cluster, getConnection } = useCluster();\n\n    // --------------------------------------- state\n\n    //current walet/vault state\n    const currentWalletNFTs = ref<INFT[]>([]);\n    const currentVaultNFTs = ref<INFT[]>([]);\n    //selected but not yet moved over in FE\n    const selectedWalletNFTs = ref<INFT[]>([]);\n    const selectedVaultNFTs = ref<INFT[]>([]);\n    //moved over in FE but not yet onchain\n    const desiredWalletNFTs = ref<INFT[]>([]);\n    const desiredVaultNFTs = ref<INFT[]>([]);\n    //moved over onchain\n    const toWalletNFTs = ref<INFT[]>([]);\n    const toVaultNFTs = ref<INFT[]>([]);\n\n    // --------------------------------------- populate initial nfts\n\n    const populateWalletNFTs = async () => {\n      // zero out to begin with\n      currentWalletNFTs.value = [];\n      selectedWalletNFTs.value = [];\n      desiredWalletNFTs.value = [];\n\n      if (getWallet()) {\n        currentWalletNFTs.value = await getNFTsByOwner(\n          getWallet()!.publicKey!,\n          getConnection()\n        );\n        desiredWalletNFTs.value = [...currentWalletNFTs.value];\n      }\n    };\n\n    const populateVaultNFTs = async () => {\n      // zero out to begin with\n      currentVaultNFTs.value = [];\n      selectedVaultNFTs.value = [];\n      desiredVaultNFTs.value = [];\n\n      const foundGDRs = await gb.fetchAllGdrPDAs(vault.value);\n      if (foundGDRs && foundGDRs.length) {\n        gdrs.value = foundGDRs;\n        console.log(`found a total of ${foundGDRs.length} gdrs`);\n\n        const mints = foundGDRs.map((gdr: any) => {\n          return { mint: gdr.account.gemMint };\n        });\n        currentVaultNFTs.value = await getNFTMetadataForMany(\n          mints,\n          getConnection()\n        );\n        desiredVaultNFTs.value = [...currentVaultNFTs.value];\n        console.log(\n          `populated a total of ${currentVaultNFTs.value.length} vault NFTs`\n        );\n      }\n    };\n\n    const updateVaultState = async () => {\n      vaultAcc.value = await gb.fetchVaultAcc(vault.value);\n      bank.value = vaultAcc.value.bank;\n      vaultLocked.value = vaultAcc.value.locked;\n    };\n\n    watch([wallet, cluster], async () => {\n      gb = await initGemBank(getConnection(), getWallet()!);\n\n      //populate wallet + vault nfts\n      await Promise.all([populateWalletNFTs(), populateVaultNFTs()]);\n    });\n\n    onMounted(async () => {\n      gb = await initGemBank(getConnection(), getWallet()!);\n\n      //prep vault + bank variables\n      vault.value = new PublicKey(props.vault!);\n      await updateVaultState();\n\n      //populate wallet + vault nfts\n      await Promise.all([populateWalletNFTs(), populateVaultNFTs()]);\n    });\n\n    // --------------------------------------- moving nfts\n\n    const handleWalletSelected = (e: any) => {\n      if (e.selected) {\n        selectedWalletNFTs.value.push(e.nft);\n      } else {\n        const index = selectedWalletNFTs.value.indexOf(e.nft);\n        selectedWalletNFTs.value.splice(index, 1);\n      }\n      ctx.emit('selected-wallet-nft', selectedWalletNFTs.value);\n    };\n\n    const handleVaultSelected = (e: any) => {\n      if (e.selected) {\n        selectedVaultNFTs.value.push(e.nft);\n      } else {\n        const index = selectedVaultNFTs.value.indexOf(e.nft);\n        selectedVaultNFTs.value.splice(index, 1);\n      }\n    };\n\n    const moveNFTsFE = (moveLeft: boolean) => {\n      if (moveLeft) {\n        //push selected vault nfts into desired wallet\n        desiredWalletNFTs.value.push(...selectedVaultNFTs.value);\n        //remove selected vault nfts from desired vault\n        removeManyFromList(selectedVaultNFTs.value, desiredVaultNFTs.value);\n        //empty selection list\n        selectedVaultNFTs.value = [];\n      } else {\n        //push selected wallet nfts into desired vault\n        desiredVaultNFTs.value.push(...selectedWalletNFTs.value);\n        //remove selected wallet nfts from desired wallet\n        removeManyFromList(selectedWalletNFTs.value, desiredWalletNFTs.value);\n        //empty selected walelt\n        selectedWalletNFTs.value = [];\n      }\n    };\n\n    //todo jam into single tx\n    const moveNFTsOnChain = async () => {\n      for (const nft of toVaultNFTs.value) {\n        console.log(nft);\n        const creator = new PublicKey(\n          //todo currently simply taking the 1st creator\n          (nft.onchainMetadata as any).data.creators[0].address\n        );\n        console.log('creator is', creator.toBase58());\n        await depositGem(nft.mint, creator, nft.pubkey!);\n      }\n      for (const nft of toWalletNFTs.value) {\n        await withdrawGem(nft.mint);\n      }\n      await Promise.all([populateWalletNFTs(), populateVaultNFTs()]);\n    };\n\n    //to vault = vault desired - vault current\n    watch(\n      desiredVaultNFTs,\n      () => {\n        toVaultNFTs.value = getListDiffBasedOnMints(\n          desiredVaultNFTs.value,\n          currentVaultNFTs.value\n        );\n        console.log('to vault nfts are', toVaultNFTs.value);\n      },\n      { deep: true }\n    );\n\n    //to wallet = wallet desired - wallet current\n    watch(\n      desiredWalletNFTs,\n      () => {\n        toWalletNFTs.value = getListDiffBasedOnMints(\n          desiredWalletNFTs.value,\n          currentWalletNFTs.value\n        );\n        console.log('to wallet nfts are', toWalletNFTs.value);\n      },\n      { deep: true }\n    );\n\n    // --------------------------------------- gem bank\n\n    let gb: any;\n    const bank = ref<PublicKey>();\n    const vault = ref<PublicKey>();\n    const vaultAcc = ref<any>();\n    const gdrs = ref<PublicKey[]>([]);\n    const vaultLocked = ref<boolean>(false);\n\n    const depositGem = async (\n      mint: PublicKey,\n      creator: PublicKey,\n      source: PublicKey\n    ) => {\n      const { txSig } = await gb.depositGemWallet(\n        bank.value,\n        vault.value,\n        new BN(1),\n        mint,\n        source,\n        creator\n      );\n      console.log('deposit done', txSig);\n    };\n\n    const withdrawGem = async (mint: PublicKey) => {\n      const { txSig } = await gb.withdrawGemWallet(\n        bank.value,\n        vault.value,\n        new BN(1),\n        mint\n      );\n      console.log('withdrawal done', txSig);\n    };\n\n    // --------------------------------------- return\n\n    return {\n      wallet,\n      desiredWalletNFTs,\n      desiredVaultNFTs,\n      toVaultNFTs,\n      toWalletNFTs,\n      handleWalletSelected,\n      handleVaultSelected,\n      moveNFTsFE,\n      moveNFTsOnChain,\n      bank,\n      // eslint-disable-next-line vue/no-dupe-keys\n      vault,\n      vaultLocked,\n    };\n  },\n});\n"],"sourceRoot":""}]}