{"remainingRequest":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/babel-loader/lib/index.js!/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/ts-loader/index.js??ref--14-2!/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/src/common/web3/NFTget.ts","dependencies":[{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/src/common/web3/NFTget.ts","mtime":1661228910000},{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/babel.config.js","mtime":1661228910000},{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/cache-loader/dist/cjs.js","mtime":1663235615568},{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/babel-loader/lib/index.js","mtime":1663235615501},{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/ts-loader/index.js","mtime":1663235630214}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/src/common/web3/NFTget.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,SAAqB,SAArB,QAAsC,iBAAtC;AACA,SAAS,gBAAT,QAAiC,mBAAjC;AACA,OAAO,KAAP,MAAkB,OAAlB;AACA,SAAS,QAAT,QAAyB,cAAzB;AAEA,IACc,QADd,GAEI,QAFJ,CACE,QADF,CACc,QADd;;SAWe,gB;;;;;8EAAf,iBAAgC,KAAhC,EAAkD,IAAlD;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OACuB,IAAI,CAAC,6BAAL,CAAmC,KAAnC,EAA0C;cAC7D,SAAS,EAAE;YADkD,CAA1C,CADvB;;UAAA;YACQ,MADR;YAAA,iCAMS,MAAM,CAAC,KAAP,CACJ,MADI,CACG,UAAC,CAAD,EAAM;cACZ,IAAM,MAAM,GAAG,CAAC,CAAC,OAAF,CAAU,IAAV,CAAe,MAAf,CAAsB,IAAtB,CAA2B,WAA1C;cACA,OAAO,MAAM,CAAC,QAAP,KAAoB,CAApB,IAAyB,MAAM,CAAC,QAAP,KAAoB,CAApD;YACD,CAJI,EAKJ,GALI,CAKA,UAAC,CAAD,EAAM;cACT,OAAO;gBAAE,MAAM,EAAE,CAAC,CAAC,MAAZ;gBAAoB,IAAI,EAAE,CAAC,CAAC,OAAF,CAAU,IAAV,CAAe,MAAf,CAAsB,IAAtB,CAA2B;cAArD,CAAP;YACD,CAPI,CANT;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAgBA,gBAAsB,cAAtB;EAAA;AAAA;;;4EAAO,kBACL,IADK,EAEL,IAFK,EAGL,MAHK;IAAA;IAAA;MAAA;QAAA;UAAA;YAKL;YACI,QANC,GAMU,EANV;YAAA;YAAA;YAAA,OAQuB,QAAQ,CAAC,MAAT,CAAgB,IAAhB,CARvB;;UAAA;YAQG,WARH;YAAA;YAAA,OAS0B,QAAQ,CAAC,IAAT,CAAc,IAAd,EAAoB,WAApB,CAT1B;;UAAA;YASC,eATD,kBAS4D,IAT5D;YAAA;YAAA,OAU2B,KAAK,CAAC,GAAN,CAAU,eAAe,CAAC,IAAhB,CAAqB,GAA/B,CAV3B;;UAAA;YAUC,gBAVD,kBAUgE,IAVhE;;YAAA,MAYC,gBAAgB,CAAC,UAAjB,CAA4B,IAA5B,KAAqC,WAZtC;cAAA;cAAA;YAAA;;YAaD,OAAO,CAAC,GAAR,CACE,kCADF,EAEE,gBAAgB,CAAC,UAAjB,CAA4B,IAF9B;YAIA,QAAQ,CAAC,IAAT,CAAc,gBAAd;YAjBC,kCAkBM;cACL,MAAM,EAAE,MAAM,GAAG,IAAI,SAAJ,CAAc,MAAd,CAAH,GAA2B,SADpC;cAEL,IAAI,EAAE,IAAI,SAAJ,CAAc,IAAd,CAFD;cAGL,eAAe,EAAf,eAHK;cAIL,gBAAgB,EAAhB;YAJK,CAlBN;;UAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;YA0BH,OAAO,CAAC,GAAR,6CAAiD,IAAjD;;UA1BG;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AA8BP,gBAAsB,qBAAtB;EAAA;AAAA;;;mFAAO,kBACL,MADK,EAEL,IAFK;IAAA;IAAA;MAAA;QAAA;UAAA;YAIC,QAJD,GAIyC,EAJzC;YAKL,MAAM,CAAC,OAAP,CAAe,UAAC,CAAD;cAAA,OAAO,QAAQ,CAAC,IAAT,CAAc,cAAc,CAAC,CAAC,CAAC,IAAH,EAAS,IAAT,EAAe,CAAC,CAAC,MAAjB,CAA5B,CAAP;YAAA,CAAf;YALK;YAAA,OAMe,OAAO,CAAC,GAAR,CAAY,QAAZ,CANf;;UAAA;YAMC,IAND,kBAMsC,MANtC,CAM6C,UAAC,CAAD;cAAA,OAAO,CAAC,CAAC,CAAT;YAAA,CAN7C;YAOL,OAAO,CAAC,GAAR,iBAAqB,IAAI,CAAC,MAA1B;YAPK,kCASE,IATF;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAYP,gBAAsB,cAAtB;EAAA;AAAA;;;4EAAO,kBACL,KADK,EAEL,IAFK;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OAIgB,gBAAgB,CAAC,KAAD,EAAQ,IAAR,CAJhC;;UAAA;YAIC,MAJD;YAKL,OAAO,CAAC,GAAR,iBAAqB,MAAM,CAAC,MAA5B;YALK;YAAA,OAOQ,qBAAqB,CAAC,MAAD,EAAS,IAAT,CAP7B;;UAAA;YAAA;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C","sourcesContent":["import { Connection, PublicKey } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport axios from 'axios';\nimport { programs } from '@metaplex/js';\n\nconst {\n  metadata: { Metadata },\n} = programs;\n\nexport interface INFT {\n  pubkey?: PublicKey;\n  mint: PublicKey;\n  onchainMetadata: unknown;\n  externalMetadata: unknown;\n}\n\nasync function getTokensByOwner(owner: PublicKey, conn: Connection) {\n  const tokens = await conn.getParsedTokenAccountsByOwner(owner, {\n    programId: TOKEN_PROGRAM_ID,\n  });\n\n  // initial filter - only tokens with 0 decimals & of which 1 is present in the wallet\n  return tokens.value\n    .filter((t) => {\n      const amount = t.account.data.parsed.info.tokenAmount;\n      return amount.decimals === 0 && amount.uiAmount === 1;\n    })\n    .map((t) => {\n      return { pubkey: t.pubkey, mint: t.account.data.parsed.info.mint };\n    });\n}\n\nexport async function getNFTMetadata(\n  mint: string,\n  conn: Connection,\n  pubkey?: string\n): Promise<INFT | undefined> {\n  // console.log('Pulling metadata for:', mint);\n  var nftArray = [];\n  try {\n    const metadataPDA = await Metadata.getPDA(mint);\n    var onchainMetadata = (await Metadata.load(conn, metadataPDA)).data;\n    var externalMetadata = (await axios.get(onchainMetadata.data.uri)).data;\n    // console.log('external meta', onchainMetadata.mint);\n    if (externalMetadata.collection.name === 'Sovereign') {\n      console.log(\n        'externalMetadata.collection.name',\n        externalMetadata.collection.name\n      );\n      nftArray.push(externalMetadata);\n      return {\n        pubkey: pubkey ? new PublicKey(pubkey) : undefined,\n        mint: new PublicKey(mint),\n        onchainMetadata,\n        externalMetadata,\n      };\n    }\n  } catch (e) {\n    console.log(`failed to pull metadata for token ${mint}`);\n  }\n}\n\nexport async function getNFTMetadataForMany(\n  tokens: any[],\n  conn: Connection\n): Promise<INFT[]> {\n  const promises: Promise<INFT | undefined>[] = [];\n  tokens.forEach((t) => promises.push(getNFTMetadata(t.mint, conn, t.pubkey)));\n  const nfts = (await Promise.all(promises)).filter((n) => !!n);\n  console.log(`found ${nfts.length} metadatas`);\n\n  return nfts as INFT[];\n}\n\nexport async function getNFTsByOwner(\n  owner: PublicKey,\n  conn: Connection\n): Promise<INFT[]> {\n  const tokens = await getTokensByOwner(owner, conn);\n  console.log(`found ${tokens.length} tokens`);\n\n  return await getNFTMetadataForMany(tokens, conn);\n}\n"],"sourceRoot":""}]}