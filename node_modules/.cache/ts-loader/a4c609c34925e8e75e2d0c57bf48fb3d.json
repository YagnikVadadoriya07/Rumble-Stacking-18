{"remainingRequest":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/babel-loader/lib/index.js!/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/ts-loader/index.js??ref--14-2!/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/src/views/Farmer.vue?vue&type=script&lang=ts","dependencies":[{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/src/views/Farmer.vue","mtime":1668678261299},{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/babel.config.js","mtime":1661228910000},{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/cache-loader/dist/cjs.js","mtime":1663235615568},{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/babel-loader/lib/index.js","mtime":1663235615501},{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/ts-loader/index.js","mtime":1663235630214},{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/cache-loader/dist/cjs.js","mtime":1663235615568},{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/vue-loader-v16/dist/index.js","mtime":1663235636100}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/src/views/Farmer.vue?vue&type=script&lang=ts"],"names":[],"mappings":"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","sourcesContent":["\nimport { defineComponent, nextTick, onMounted, ref, watch } from \"vue\";\nimport useWallet from \"@/composables/wallet\";\nimport useCluster from \"@/composables/cluster\";\nimport { initGemFarm } from \"@/common/gem-farm\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport ConfigPane from \"@/components/ConfigPane.vue\";\nimport FarmerDisplay from \"@/components/gem-farm/FarmerDisplay.vue\";\nimport Vault from \"@/components/gem-bank/Vault.vue\";\nimport { INFT } from \"@/common/web3/NFTget\";\nimport axios from \"axios\";\nimport NFTCard from \"@/components/gem-bank/NFTCard.vue\";\nimport NFTGrid from \"@/components/gem-bank/NFTGrid.vue\";\n\nimport * as solanaWeb3 from \"@solana/web3.js\"; // 1.36.0\nimport * as splToken from \"@solana/spl-token\"; // 0.1.8\n\nimport {\n  getNFTMetadataForMany,\n  getNFTsByOwner,\n  getNFTMetadata,\n} from \"@/common/web3/NFTget\";\nimport { programs } from \"@metaplex/js\";\nimport { findFarmerPDA, stringifyPKsAndBNs } from \"@gemworks/gem-farm-ts\";\n\ndeclare global {\n  interface Window {\n    solana: any;\n  }\n}\n\nexport default defineComponent({\n  components: { Vault, FarmerDisplay, ConfigPane, NFTCard, NFTGrid },\n  data() {\n    return {\n      selectedImage: \"\",\n      selectedNFTs: [],\n    };\n  },\n\n  methods: {\n    getNFT(e: any) {\n      console.log(\"getNFT\");\n\n      // for (const nft of selectedNFTs.value) {\n      //       console.log('nftData...............', nft);\n      //     }\n\n      console.log(\"selectedImage.....\", this.selectedImage);\n      this.selectedNFTs.map((nft: any) => {\n        this.selectedImage = (nft.externalMetadata as any)?.image;\n        console.log(\"nft....\", this.selectedImage);\n      });\n    },\n  },\n\n  props: {\n    nft: { type: Object, required: true },\n  },\n  setup(props) {\n    const { wallet, getWallet } = useWallet();\n    const { cluster, getConnection } = useCluster();\n    let gf: any;\n\n    watch([wallet, cluster], async () => {\n      await freshStart();\n    });\n\n    //needed in case we switch in from another window\n    onMounted(async () => {\n      await freshStart();\n    });\n\n    //\n    // --------------------------------------- farmer details\n    const farm = ref<string>(\n      process.env.VUE_APP_GEM_FARM_PK ||\n        \"HcpNMwd1SsyqVYaK72Qva59VEA8NtCyN2XPxkUMZo5u6\"\n    );\n    const farmAcc = ref<any>();\n    const farmerIdentity = ref<string>();\n    const farmerAcc = ref<any>();\n    const farmerState = ref<string>();\n    const availableA = ref<string>();\n    const availableB = ref<string>();\n\n    //auto loading for when farm changes\n    watch(farm, async () => {\n      await freshStart();\n    });\n\n    const updateAvailableRewards = async () => {\n      availableA.value = farmerAcc.value.rewardA.accruedReward\n        .sub(farmerAcc.value.rewardA.paidOutReward)\n        .toString();\n      availableB.value = farmerAcc.value.rewardB.accruedReward\n        .sub(farmerAcc.value.rewardB.paidOutReward)\n        .toString();\n    };\n\n    var updateNFT = async () => {\n      console.log(\"updateNFT\");\n      await Promise.all(\n        selectedNFTs.value.map((nft) => {\n          const mint = nft.mint;\n          console.log(\"mint is\", mint.toBase58());\n          axios\n            .post(\"http://192.168.29.223:3003/updateNFT\", {\n              nftToken: mint,\n            })\n            .then((response: any) => {\n              console.log(response.data);\n            });\n        })\n      );\n    };\n\n    const fetchFarn = async () => {\n      farmAcc.value = await gf.fetchFarmAcc(new PublicKey(farm.value!));\n      console.log(\n        `farm found at ${farm.value}:`,\n        stringifyPKsAndBNs(farmAcc.value)\n      );\n    };\n\n    const fetchFarmer = async () => {\n      const [farmerPDA] = await findFarmerPDA(\n        new PublicKey(farm.value!),\n        getWallet()!.publicKey!\n      );\n      farmerIdentity.value = getWallet()!.publicKey?.toBase58();\n      farmerAcc.value = await gf.fetchFarmerAcc(farmerPDA);\n      farmerState.value = gf.parseFarmerState(farmerAcc.value);\n      await updateAvailableRewards();\n      console.log(\n        `farmer found at ${farmerIdentity.value}:`,\n        stringifyPKsAndBNs(farmerAcc.value)\n      );\n    };\n\n    const freshStart = async () => {\n      if (getWallet() && getConnection()) {\n        gf = await initGemFarm(getConnection(), getWallet()!);\n        farmerIdentity.value = getWallet()!.publicKey?.toBase58();\n        //reset stuff\n        farmAcc.value = undefined;\n        farmerAcc.value = undefined;\n        farmerState.value = undefined;\n        availableA.value = undefined;\n        availableB.value = undefined;\n        try {\n          await fetchFarn();\n          await fetchFarmer();\n        } catch (e) {\n          console.log(`farm with PK ${farm.value} not found :(`);\n        }\n      }\n    };\n\n    const initFarmer = async () => {\n      await gf.initFarmerWallet(new PublicKey(farm.value!));\n      await fetchFarmer();\n    };\n\n    // --------------------------------------- staking\n    const beginStaking = async () => {\n      await gf.stakeWallet(new PublicKey(farm.value!));\n      await fetchFarmer();\n      selectedNFTs.value = [];\n    };\n    const endStaking = async () => {\n      await gf.unstakeWallet(new PublicKey(farm.value!));\n      await fetchFarmer();\n      selectedNFTs.value = [];\n    };\n    const claim = async () => {\n      await gf.claimWallet(\n        new PublicKey(farm.value!),\n        new PublicKey(farmAcc.value.rewardA.rewardMint!),\n        new PublicKey(farmAcc.value.rewardB.rewardMint!)\n      );\n      await fetchFarmer();\n    };\n    const handleRefreshFarmer = async () => {\n      await fetchFarmer();\n    };\n    // --------------------------------------- adding extra gem\n    const selectedNFTs = ref<INFT[]>([]);\n    // const handleNewSelectedNFT = (newSelectedNFTs: INFT[]) => {\n    //   console.log(`selected ${newSelectedNFTs.length} NFTs`);\n    //   selectedNFTs.value = newSelectedNFTs;\n    //   console.log(\"newnft........\",newSelectedNFTs)\n    //         console.log(\n    //     'getWallet()!.publicKey?.toBase58()',\n    //     getWallet()!.publicKey?.toBase58()\n    //   );\n    // };\n    const handleNewSelectedNFT = (newSelectedNFTs: INFT[]) => {\n      for (let i = 0; i < newSelectedNFTs.length; i++) {\n        selectedNFTs.value.push(newSelectedNFTs[i]);\n        console.log(\"newSelectedNFTs....\", newSelectedNFTs);\n        console.log(\n          \"shift\",\n          newSelectedNFTs.length === 2 && newSelectedNFTs.shift()\n        );\n        console.log(\"newShiftNFTs....\", newSelectedNFTs);\n      }\n      console.log(`selected ${newSelectedNFTs.length} NFTs`);\n    };\n    const addSingleGem = async (\n      gemMint: PublicKey,\n      gemSource: PublicKey,\n      creator: PublicKey\n    ) => {\n      await gf.flashDepositWallet(\n        new PublicKey(farm.value!),\n        \"1\",\n        gemMint,\n        gemSource,\n        creator\n      );\n      await fetchFarmer();\n    };\n    const addGems = async () => {\n      await Promise.all(\n        selectedNFTs.value.map((nft) => {\n          const creator = new PublicKey(\n            //todo currently simply taking the 1st creator\n            (nft.onchainMetadata as any).data.creators[0].address\n          );\n          console.log(\"creator is\", creator.toBase58());\n          addSingleGem(nft.mint, nft.pubkey!, creator);\n        })\n      );\n      console.log(\n        `added another ${selectedNFTs.value.length} gems into staking vault`\n      );\n    };\n\n    const connection = new solanaWeb3.Connection(\n      solanaWeb3.clusterApiUrl(\"devnet\"),\n      \"confirmed\"\n    );\n\n    const sendTokens = async () => {\n      // USDC's token address on devnet.\n      const SOLANA_DEVNET_USDC_PUBKEY =\n        \"EKgrBuvo46AF19pFefxnXKCaVc8MEW5KSp9gZkaTYi5T\";\n\n      console.log(\"window\", window);\n      console.log(window.solana);\n      console.log(window.solana.publicKey);\n      console.log(window.solana.publicKey.toBase58());\n\n      // Convert to object type.\n      const fromWallet = new solanaWeb3.PublicKey(window.solana.publicKey);\n\n      const toWallet = new solanaWeb3.PublicKey(\n        \"8Qiw7S7nQJpbetDgywdsfnkFAz2gaJKWqotYveZhsafn\"\n      );\n\n      const USDC_pubkey = new solanaWeb3.PublicKey(SOLANA_DEVNET_USDC_PUBKEY);\n\n      // Create token class.\n      // var USDC_Token = new splToken.Token(\n      //   connection,\n      //   USDC_pubkey,\n      //   splToken.TOKEN_PROGRAM_ID,\n      //   fromWallet\n      // );\n\n      // // Create token accounts for USDC token if they don't exist.\n      // const fromTokenAccount = await USDC_Token.getOrCreateAssociatedAccountInfo(\n      //   fromWallet\n      // );\n      // // Get the derived address of the destination wallet which will hold the custom token\n      // const associatedDestinationTokenAddr =\n      //   await splToken.Token.getAssociatedTokenAddress(\n      //     USDC_Token.associatedProgramId,\n      //     USDC_Token.programId,\n      //     USDC_pubkey,\n      //     toWallet\n      //   );\n      // console.log(associatedDestinationTokenAddr);\n      // const receiverAccount = await connection.getAccountInfo(\n      //   associatedDestinationTokenAddr\n      // );\n      // console.log(receiverAccount);\n      // if (receiverAccount === null) {\n      //   console.log(\"Account doesn't have USDC Token. Creating token address.\");\n      //   // Add token transfer instructions to transaction.\n      //   const transaction = new solanaWeb3.Transaction().add(\n      //     splToken.Token.createAssociatedTokenAccountInstruction(\n      //       USDC_Token.associatedProgramId,\n      //       USDC_Token.programId,\n      //       USDC_pubkey,\n      //       associatedDestinationTokenAddr,\n      //       toWallet,\n      //       fromWallet\n      //     )\n      //   );\n      //   // Fee payer of the transaction.\n      //   transaction.feePayer = fromWallet;\n      //   // Latest blockhash.\n      //   transaction.recentBlockhash = (\n      //     await connection.getLatestBlockhash()\n      //   ).blockhash;\n      //   // Request creator to sign the transaction.\n      //   const signed = await window.solana.signTransaction(transaction);\n      //   // Signature generated.\n      //   const signature = await connection.sendRawTransaction(signed.serialize());\n      //   console.log(signature);\n      //   // Confirm whether the transaction's confirmed or not.\n      //   const confirmation = await connection.confirmTransaction(signature);\n      //   console.log(confirmation);\n      // }\n      // const toTokenAccount = await USDC_Token.getOrCreateAssociatedAccountInfo(\n      //   toWallet\n      // );\n      // // Add token transfer instructions to transaction.\n      // const transaction = new solanaWeb3.Transaction().add(\n      //   splToken.Token.createTransferInstruction(\n      //     splToken.TOKEN_PROGRAM_ID,\n      //     fromTokenAccount.address,\n      //     toTokenAccount.address,\n      //     fromWallet,\n      //     [],\n      //     1000 * 1000000000\n      //   )\n      // );\n      // // Fee payer of the transaction.\n      // transaction.feePayer = fromWallet;\n      // // Latest blockhash.\n      // transaction.recentBlockhash = (\n      //   await connection.getLatestBlockhash()\n      // ).blockhash;\n      // // Request creator to sign the transaction.\n      // const signed = await window.solana.signTransaction(transaction);\n      // // Signature generated.\n      // const signature = await connection.sendRawTransaction(signed.serialize());\n      // console.log(signature);\n      // // Confirm whether the transaction went through or not.\n      // const confirmation = await connection.confirmTransaction(signature);\n      // console.log(confirmation);\n    };\n\n    return {\n      wallet,\n      farm,\n      farmAcc,\n      farmer: farmerIdentity,\n      farmerAcc,\n      farmerState,\n      availableA,\n      availableB,\n      initFarmer,\n      beginStaking,\n      endStaking,\n      updateNFT,\n      claim,\n      handleRefreshFarmer,\n      selectedNFTs,\n      handleNewSelectedNFT,\n      addGems,\n      sendTokens,\n    };\n  },\n});\n"],"sourceRoot":""}]}