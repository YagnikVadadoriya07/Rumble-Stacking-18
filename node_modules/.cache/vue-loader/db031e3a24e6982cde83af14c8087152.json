{"remainingRequest":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/src/views/Farmer.vue?vue&type=style&index=0&id=1b90589d&scoped=true&lang=css","dependencies":[{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/src/views/Farmer.vue","mtime":1668678261299},{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/css-loader/dist/cjs.js","mtime":1663235635608},{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1663235636100},{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/postcss-loader/src/index.js","mtime":1663235635931},{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/cache-loader/dist/cjs.js","mtime":1663235615568},{"path":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/node_modules/vue-loader-v16/dist/index.js","mtime":1663235636100}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5idXR0b24tc3R5bGUgewogIHdpZHRoOiAxNjVweDsKICBoZWlnaHQ6IDUzcHg7CiAgYmFja2dyb3VuZDogI2EwN2QzZTsKICBjbGlwLXBhdGg6IHBvbHlnb24oMTAwJSAwLCAxMDAlIDQ5JSwgODIlIDEwMCUsIDAgMTAwJSwgMCAwKTsKICBib3JkZXI6IG5vbmU7CiAgb3V0bGluZTogbm9uZTsKICBmb250LXN0eWxlOiBub3JtYWw7CiAgZm9udC13ZWlnaHQ6IDcwMDsKICBmb250LXNpemU6IDE2cHg7CiAgbGluZS1oZWlnaHQ6IDE5cHg7CiAgdGV4dC1hbGlnbjogY2VudGVyOwogIGNvbG9yOiAjZmZmZmZmOwogIG1hcmdpbjogMHB4IDIwcHg7Cn0KCi5idXR0b24tc3R5bGUxIHsKICB3aWR0aDogNDI1cHg7CiAgaGVpZ2h0OiA1M3B4OwogIGJhY2tncm91bmQ6ICNhMDdkM2U7CiAgY2xpcC1wYXRoOiBwb2x5Z29uKDEwMCUgMCwgMTAwJSA0OSUsIDgyJSAxMDAlLCAwIDEwMCUsIDAgMCk7CiAgYm9yZGVyOiBub25lOwogIG91dGxpbmU6IG5vbmU7CiAgZm9udC1zdHlsZTogbm9ybWFsOwogIGZvbnQtd2VpZ2h0OiA3MDA7CiAgZm9udC1zaXplOiAxNnB4OwogIGxpbmUtaGVpZ2h0OiAxOXB4OwogIHRleHQtYWxpZ246IGNlbnRlcjsKICBjb2xvcjogI2ZmZmZmZjsKfQoKLnN0eWxlX3N0ZXBCb3hfX2d3RERTIHsKICBtYXJnaW46IDQwcHggMCAwIDA7CiAgcGFkZGluZzogMTRweDsKICB3aWR0aDogMzAlOwogIGhlaWdodDogNTAwcHg7CiAgYmFja2dyb3VuZDogIzI0MjQyNDsKICBib3JkZXItcmFkaXVzOiAxMHB4OwogIGRpc3BsYXk6IGZsZXg7CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKfQo="},{"version":3,"sources":["/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/src/views/Farmer.vue"],"names":[],"mappings":"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","file":"/home/yagnik-vadadoriya/Desktop/Gem-Farm-17-2022/src/views/Farmer.vue","sourceRoot":"","sourcesContent":["<template>\n  <ConfigPane />\n  <div v-if=\"!wallet\" class=\"text-center text-white text-2xl\">\n    Pls connect solana wallet\n  </div>\n  <div v-else>\n    <!--farm address-->\n    <div class=\"nes-container with-title mb-10 hidden\">\n      <p class=\"text-4xl text-white\">\n        Connect to a Farm : Paste\n        (\"HcpNMwd1SsyqVYaK72Qva59VEA8NtCyN2XPxkUMZo5u6\")\n      </p>\n      <div class=\"nes-field mb-5\">\n        <!-- <label for=\"farm text-white\">Farm address:</label> -->\n        <input id=\"farm\" class=\"nes-input\" v-model=\"farm\" />\n      </div>\n    </div>\n    <!-- 73EtAt7ze1Az3WAyp3m5kGKf1WbvdNfhYE58usRw8gi9 -->\n    <div v-if=\"farmerAcc\">\n      <FarmerDisplay\n        :key=\"farmerAcc\"\n        :farm=\"farm\"\n        :farmAcc=\"farmAcc\"\n        :farmer=\"farmer\"\n        :farmerAcc=\"farmerAcc\"\n        class=\"mb-10\"\n        @refresh-farmer=\"handleRefreshFarmer\"\n      />\n      <Vault\n        :key=\"farmerAcc\"\n        class=\"mb-10\"\n        :vault=\"farmerAcc.vault.toBase58()\"\n        @selected-wallet-nft=\"handleNewSelectedNFT\"\n      >\n        <button\n          v-if=\"farmerState === 'staked' && selectedNFTs.length > 0\"\n          class=\"button-style mr-5\"\n          @click=\"addGems\"\n        >\n          Add Gems (resets staking)\n        </button>\n        <button\n          v-if=\"farmerState === 'unstaked'\"\n          class=\"button-style mr-5 transition ease-in-out delay-150 bg-blue-500 hover:-translate-y-1 hover:scale-110 hover:bg-indigo-500 duration-300\"\n          @click=\"beginStaking\"\n        >\n          Begin staking\n        </button>\n        <button\n          v-if=\"farmerState === 'staked'\"\n          class=\"button-style mr-5\"\n          @click=\"endStaking\"\n        >\n          End staking\n        </button>\n        <!-- <button class=\"button-style mr-5\">Upgrade NFT Step 1</button> -->\n        <button\n          v-if=\"farmerState === 'pendingCooldown'\"\n          class=\"button-style mr-5\"\n          @click=\"endStaking\"\n        >\n          End cooldown\n        </button>\n        <button class=\"button-style\" @click=\"claim\">\n          Claim {{ availableA }} $SQRE\n        </button>\n      </Vault>\n    </div>\n    <div v-else>\n      <div class=\"w-full text-center mb-5 text-white text-2xl\">\n        If you are staking Rumble NFT first time than only Create New Farmer\n      </div>\n      <div class=\"w-full text-center\">\n        <button\n          class=\"button-style transition ease-in-out delay-150 hover:-translate-y-1 hover:scale-110 hover:bg-white hover:text-yellow-700 duration-300\"\n          @click=\"initFarmer\"\n        >\n          New Farmer\n        </button>\n      </div>\n    </div>\n  </div>\n  <!-- <div class=\"flex justify-between items-center gap-10\">\n    <div class=\"style_stepBox__gwDDS\">\n      <img :src=\"selectedImage\" alt=\"\" class=\"w-72\" />\n      <img src=\"../assets/king.svg\" alt=\"\" class=\"w-48\" id=\"main_img\" />\n    </div>\n    <div>\n      <img src=\"../assets/plus.svg\" alt=\"\" class=\"w-48\" />\n    </div>\n    <div class=\"style_stepBox__gwDDS\">\n      <img src=\"../assets/layerchirag.svg\" alt=\"\" class=\"w-80\" />\n    </div>\n    <div>\n      <img src=\"../assets/equals.svg\" alt=\"\" class=\"w-48\" />\n    </div>\n    <div class=\"style_stepBox__gwDDS\">\n      <img src=\"../assets/frame.svg\" alt=\"\" class=\"\" />\n    </div>\n  </div>\n  <div class=\"my-10 flex justify-between\">\n    <div class=\"flex justify-start\">\n      <button class=\"button-style1\" @click=\"getNFT\">get NFT</button>\n    </div>\n    <div class=\"flex justify-center\">\n      <button class=\"button-style1\" @click=\"sendTokens\">Send 1000 SQRE Token</button>\n    </div>\n    <div class=\"flex justify-end\">\n      <button class=\"button-style1\" @click=\"updateNFT\">Upgrade NFT</button>\n    </div>\n  </div> -->\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, nextTick, onMounted, ref, watch } from \"vue\";\nimport useWallet from \"@/composables/wallet\";\nimport useCluster from \"@/composables/cluster\";\nimport { initGemFarm } from \"@/common/gem-farm\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport ConfigPane from \"@/components/ConfigPane.vue\";\nimport FarmerDisplay from \"@/components/gem-farm/FarmerDisplay.vue\";\nimport Vault from \"@/components/gem-bank/Vault.vue\";\nimport { INFT } from \"@/common/web3/NFTget\";\nimport axios from \"axios\";\nimport NFTCard from \"@/components/gem-bank/NFTCard.vue\";\nimport NFTGrid from \"@/components/gem-bank/NFTGrid.vue\";\n\nimport * as solanaWeb3 from \"@solana/web3.js\"; // 1.36.0\nimport * as splToken from \"@solana/spl-token\"; // 0.1.8\n\nimport {\n  getNFTMetadataForMany,\n  getNFTsByOwner,\n  getNFTMetadata,\n} from \"@/common/web3/NFTget\";\nimport { programs } from \"@metaplex/js\";\nimport { findFarmerPDA, stringifyPKsAndBNs } from \"@gemworks/gem-farm-ts\";\n\ndeclare global {\n  interface Window {\n    solana: any;\n  }\n}\n\nexport default defineComponent({\n  components: { Vault, FarmerDisplay, ConfigPane, NFTCard, NFTGrid },\n  data() {\n    return {\n      selectedImage: \"\",\n      selectedNFTs: [],\n    };\n  },\n\n  methods: {\n    getNFT(e: any) {\n      console.log(\"getNFT\");\n\n      // for (const nft of selectedNFTs.value) {\n      //       console.log('nftData...............', nft);\n      //     }\n\n      console.log(\"selectedImage.....\", this.selectedImage);\n      this.selectedNFTs.map((nft: any) => {\n        this.selectedImage = (nft.externalMetadata as any)?.image;\n        console.log(\"nft....\", this.selectedImage);\n      });\n    },\n  },\n\n  props: {\n    nft: { type: Object, required: true },\n  },\n  setup(props) {\n    const { wallet, getWallet } = useWallet();\n    const { cluster, getConnection } = useCluster();\n    let gf: any;\n\n    watch([wallet, cluster], async () => {\n      await freshStart();\n    });\n\n    //needed in case we switch in from another window\n    onMounted(async () => {\n      await freshStart();\n    });\n\n    //\n    // --------------------------------------- farmer details\n    const farm = ref<string>(\n      process.env.VUE_APP_GEM_FARM_PK ||\n        \"HcpNMwd1SsyqVYaK72Qva59VEA8NtCyN2XPxkUMZo5u6\"\n    );\n    const farmAcc = ref<any>();\n    const farmerIdentity = ref<string>();\n    const farmerAcc = ref<any>();\n    const farmerState = ref<string>();\n    const availableA = ref<string>();\n    const availableB = ref<string>();\n\n    //auto loading for when farm changes\n    watch(farm, async () => {\n      await freshStart();\n    });\n\n    const updateAvailableRewards = async () => {\n      availableA.value = farmerAcc.value.rewardA.accruedReward\n        .sub(farmerAcc.value.rewardA.paidOutReward)\n        .toString();\n      availableB.value = farmerAcc.value.rewardB.accruedReward\n        .sub(farmerAcc.value.rewardB.paidOutReward)\n        .toString();\n    };\n\n    var updateNFT = async () => {\n      console.log(\"updateNFT\");\n      await Promise.all(\n        selectedNFTs.value.map((nft) => {\n          const mint = nft.mint;\n          console.log(\"mint is\", mint.toBase58());\n          axios\n            .post(\"http://192.168.29.223:3003/updateNFT\", {\n              nftToken: mint,\n            })\n            .then((response: any) => {\n              console.log(response.data);\n            });\n        })\n      );\n    };\n\n    const fetchFarn = async () => {\n      farmAcc.value = await gf.fetchFarmAcc(new PublicKey(farm.value!));\n      console.log(\n        `farm found at ${farm.value}:`,\n        stringifyPKsAndBNs(farmAcc.value)\n      );\n    };\n\n    const fetchFarmer = async () => {\n      const [farmerPDA] = await findFarmerPDA(\n        new PublicKey(farm.value!),\n        getWallet()!.publicKey!\n      );\n      farmerIdentity.value = getWallet()!.publicKey?.toBase58();\n      farmerAcc.value = await gf.fetchFarmerAcc(farmerPDA);\n      farmerState.value = gf.parseFarmerState(farmerAcc.value);\n      await updateAvailableRewards();\n      console.log(\n        `farmer found at ${farmerIdentity.value}:`,\n        stringifyPKsAndBNs(farmerAcc.value)\n      );\n    };\n\n    const freshStart = async () => {\n      if (getWallet() && getConnection()) {\n        gf = await initGemFarm(getConnection(), getWallet()!);\n        farmerIdentity.value = getWallet()!.publicKey?.toBase58();\n        //reset stuff\n        farmAcc.value = undefined;\n        farmerAcc.value = undefined;\n        farmerState.value = undefined;\n        availableA.value = undefined;\n        availableB.value = undefined;\n        try {\n          await fetchFarn();\n          await fetchFarmer();\n        } catch (e) {\n          console.log(`farm with PK ${farm.value} not found :(`);\n        }\n      }\n    };\n\n    const initFarmer = async () => {\n      await gf.initFarmerWallet(new PublicKey(farm.value!));\n      await fetchFarmer();\n    };\n\n    // --------------------------------------- staking\n    const beginStaking = async () => {\n      await gf.stakeWallet(new PublicKey(farm.value!));\n      await fetchFarmer();\n      selectedNFTs.value = [];\n    };\n    const endStaking = async () => {\n      await gf.unstakeWallet(new PublicKey(farm.value!));\n      await fetchFarmer();\n      selectedNFTs.value = [];\n    };\n    const claim = async () => {\n      await gf.claimWallet(\n        new PublicKey(farm.value!),\n        new PublicKey(farmAcc.value.rewardA.rewardMint!),\n        new PublicKey(farmAcc.value.rewardB.rewardMint!)\n      );\n      await fetchFarmer();\n    };\n    const handleRefreshFarmer = async () => {\n      await fetchFarmer();\n    };\n    // --------------------------------------- adding extra gem\n    const selectedNFTs = ref<INFT[]>([]);\n    // const handleNewSelectedNFT = (newSelectedNFTs: INFT[]) => {\n    //   console.log(`selected ${newSelectedNFTs.length} NFTs`);\n    //   selectedNFTs.value = newSelectedNFTs;\n    //   console.log(\"newnft........\",newSelectedNFTs)\n    //         console.log(\n    //     'getWallet()!.publicKey?.toBase58()',\n    //     getWallet()!.publicKey?.toBase58()\n    //   );\n    // };\n    const handleNewSelectedNFT = (newSelectedNFTs: INFT[]) => {\n      for (let i = 0; i < newSelectedNFTs.length; i++) {\n        selectedNFTs.value.push(newSelectedNFTs[i]);\n        console.log(\"newSelectedNFTs....\", newSelectedNFTs);\n        console.log(\n          \"shift\",\n          newSelectedNFTs.length === 2 && newSelectedNFTs.shift()\n        );\n        console.log(\"newShiftNFTs....\", newSelectedNFTs);\n      }\n      console.log(`selected ${newSelectedNFTs.length} NFTs`);\n    };\n    const addSingleGem = async (\n      gemMint: PublicKey,\n      gemSource: PublicKey,\n      creator: PublicKey\n    ) => {\n      await gf.flashDepositWallet(\n        new PublicKey(farm.value!),\n        \"1\",\n        gemMint,\n        gemSource,\n        creator\n      );\n      await fetchFarmer();\n    };\n    const addGems = async () => {\n      await Promise.all(\n        selectedNFTs.value.map((nft) => {\n          const creator = new PublicKey(\n            //todo currently simply taking the 1st creator\n            (nft.onchainMetadata as any).data.creators[0].address\n          );\n          console.log(\"creator is\", creator.toBase58());\n          addSingleGem(nft.mint, nft.pubkey!, creator);\n        })\n      );\n      console.log(\n        `added another ${selectedNFTs.value.length} gems into staking vault`\n      );\n    };\n\n    const connection = new solanaWeb3.Connection(\n      solanaWeb3.clusterApiUrl(\"devnet\"),\n      \"confirmed\"\n    );\n\n    const sendTokens = async () => {\n      // USDC's token address on devnet.\n      const SOLANA_DEVNET_USDC_PUBKEY =\n        \"EKgrBuvo46AF19pFefxnXKCaVc8MEW5KSp9gZkaTYi5T\";\n\n      console.log(\"window\", window);\n      console.log(window.solana);\n      console.log(window.solana.publicKey);\n      console.log(window.solana.publicKey.toBase58());\n\n      // Convert to object type.\n      const fromWallet = new solanaWeb3.PublicKey(window.solana.publicKey);\n\n      const toWallet = new solanaWeb3.PublicKey(\n        \"8Qiw7S7nQJpbetDgywdsfnkFAz2gaJKWqotYveZhsafn\"\n      );\n\n      const USDC_pubkey = new solanaWeb3.PublicKey(SOLANA_DEVNET_USDC_PUBKEY);\n\n      // Create token class.\n      // var USDC_Token = new splToken.Token(\n      //   connection,\n      //   USDC_pubkey,\n      //   splToken.TOKEN_PROGRAM_ID,\n      //   fromWallet\n      // );\n\n      // // Create token accounts for USDC token if they don't exist.\n      // const fromTokenAccount = await USDC_Token.getOrCreateAssociatedAccountInfo(\n      //   fromWallet\n      // );\n      // // Get the derived address of the destination wallet which will hold the custom token\n      // const associatedDestinationTokenAddr =\n      //   await splToken.Token.getAssociatedTokenAddress(\n      //     USDC_Token.associatedProgramId,\n      //     USDC_Token.programId,\n      //     USDC_pubkey,\n      //     toWallet\n      //   );\n      // console.log(associatedDestinationTokenAddr);\n      // const receiverAccount = await connection.getAccountInfo(\n      //   associatedDestinationTokenAddr\n      // );\n      // console.log(receiverAccount);\n      // if (receiverAccount === null) {\n      //   console.log(\"Account doesn't have USDC Token. Creating token address.\");\n      //   // Add token transfer instructions to transaction.\n      //   const transaction = new solanaWeb3.Transaction().add(\n      //     splToken.Token.createAssociatedTokenAccountInstruction(\n      //       USDC_Token.associatedProgramId,\n      //       USDC_Token.programId,\n      //       USDC_pubkey,\n      //       associatedDestinationTokenAddr,\n      //       toWallet,\n      //       fromWallet\n      //     )\n      //   );\n      //   // Fee payer of the transaction.\n      //   transaction.feePayer = fromWallet;\n      //   // Latest blockhash.\n      //   transaction.recentBlockhash = (\n      //     await connection.getLatestBlockhash()\n      //   ).blockhash;\n      //   // Request creator to sign the transaction.\n      //   const signed = await window.solana.signTransaction(transaction);\n      //   // Signature generated.\n      //   const signature = await connection.sendRawTransaction(signed.serialize());\n      //   console.log(signature);\n      //   // Confirm whether the transaction's confirmed or not.\n      //   const confirmation = await connection.confirmTransaction(signature);\n      //   console.log(confirmation);\n      // }\n      // const toTokenAccount = await USDC_Token.getOrCreateAssociatedAccountInfo(\n      //   toWallet\n      // );\n      // // Add token transfer instructions to transaction.\n      // const transaction = new solanaWeb3.Transaction().add(\n      //   splToken.Token.createTransferInstruction(\n      //     splToken.TOKEN_PROGRAM_ID,\n      //     fromTokenAccount.address,\n      //     toTokenAccount.address,\n      //     fromWallet,\n      //     [],\n      //     1000 * 1000000000\n      //   )\n      // );\n      // // Fee payer of the transaction.\n      // transaction.feePayer = fromWallet;\n      // // Latest blockhash.\n      // transaction.recentBlockhash = (\n      //   await connection.getLatestBlockhash()\n      // ).blockhash;\n      // // Request creator to sign the transaction.\n      // const signed = await window.solana.signTransaction(transaction);\n      // // Signature generated.\n      // const signature = await connection.sendRawTransaction(signed.serialize());\n      // console.log(signature);\n      // // Confirm whether the transaction went through or not.\n      // const confirmation = await connection.confirmTransaction(signature);\n      // console.log(confirmation);\n    };\n\n    return {\n      wallet,\n      farm,\n      farmAcc,\n      farmer: farmerIdentity,\n      farmerAcc,\n      farmerState,\n      availableA,\n      availableB,\n      initFarmer,\n      beginStaking,\n      endStaking,\n      updateNFT,\n      claim,\n      handleRefreshFarmer,\n      selectedNFTs,\n      handleNewSelectedNFT,\n      addGems,\n      sendTokens,\n    };\n  },\n});\n</script>\n<style scoped>\n.button-style {\n  width: 165px;\n  height: 53px;\n  background: #a07d3e;\n  clip-path: polygon(100% 0, 100% 49%, 82% 100%, 0 100%, 0 0);\n  border: none;\n  outline: none;\n  font-style: normal;\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 19px;\n  text-align: center;\n  color: #ffffff;\n  margin: 0px 20px;\n}\n\n.button-style1 {\n  width: 425px;\n  height: 53px;\n  background: #a07d3e;\n  clip-path: polygon(100% 0, 100% 49%, 82% 100%, 0 100%, 0 0);\n  border: none;\n  outline: none;\n  font-style: normal;\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 19px;\n  text-align: center;\n  color: #ffffff;\n}\n\n.style_stepBox__gwDDS {\n  margin: 40px 0 0 0;\n  padding: 14px;\n  width: 30%;\n  height: 500px;\n  background: #242424;\n  border-radius: 10px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n</style>\n"]}]}